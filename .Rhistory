t2 = "sla"
### trait matrix
X = as.matrix( log(spp_traits[,c(t1,t2)]) )
rownames(X) = spp_traits$species
phylomorphospace(one_simmap$tree[[100]],
X,ftype="off",
bty="n",xlab="relative gape width",
ylab="relative buccal length",
node.size=c(0,1.3),node.by.map=TRUE)
phylomorphospace(one_simmap$tree[[100]],
X,ftype="off",
bty="n",
xlab="seed mass",
ylab="SLA",
node.size=c(0,1.3),
node.by.map=TRUE)
phylomorphospace(one_simmap$tree[[100]],
X,ftype="off",
bty="n",
xlab="seed mass",
ylab="SLA",
node.size=c(0,1.3),
node.by.map=TRUE)
legend("topleft",c("rainfores","generalist", "open-vegetation"),
pt.bg=palette()[1:2],pch=22,pt.cex=1.5,
cex=0.8,bty="n")
legend("topleft",c("rainfores","generalist", "open-vegetation"),
pt.bg=palette()[1:3],
pch=22,
pt.cex=1.5,
cex=0.8,
bty="n")
phylomorphospace(tree = one_simmap$tree[[100]],
X = X,
ftype="off",
bty="n",
xlab="seed mass",
ylab="SLA",
color = "black"
node.size=c(0,1.3),
phylomorphospace(tree = one_simmap$tree[[100]],
X = X,
ftype="off",
bty="n",
xlab="seed mass",
ylab="SLA",
color = "black",
node.size=c(0,1.3),
node.by.map=TRUE)
legend("topleft",c("rainfores","generalist", "open-vegetation"),
pt.bg=palette()[1:3],
pch=22,
pt.cex=1.5,
cex=0.8,
bty="n")
## state colors
state_cols = c("forestgreen", "brown","darkorange")
names(state_cols) = levels(habitat_range$range)
phylomorphospace(tree = one_simmap$tree[[100]],
X = X,
ftype="off",
bty="n",
xlab="seed mass",
ylab="SLA",
color = state_cols,
node.size=c(0,1.3),
node.by.map=TRUE)
phylomorphospace(tree = one_simmap$tree[[100]],
X = X,
ftype="off",
bty="n",
xlab="seed mass",
ylab="SLA",
colors = state_cols,
node.size=c(0,1.3),
node.by.map=TRUE)
legend("topleft",c("rainfores","generalist", "open-vegetation"),
pt.bg= state_cols,
pch=22,
pt.cex=1.5,
cex=0.8,
bty="n")
phylomorphospace(tree = one_simmap$tree[[100]],
X = X,
ftype="off",
bty="n",
xlab="ln seed mass",
ylab="ln SLA",
colors = state_cols,
node.size=c(0,1.3),
node.by.map=TRUE)
one_simmap = simmap_list[[100]]
phylomorphospace(tree = one_simmap$tree[[100]],
X = X,
ftype="off",
bty="n",
xlab="ln seed mass",
ylab="ln SLA",
colors = state_cols,
node.size=c(0,1.3),
node.by.map=TRUE)
phylomorphospace(tree = one_simmap$tree[[100]],
X = X,
ftype="off",
bty="n",
xlab="ln seed mass",
ylab="ln SLA",
colors = state_cols,
node.size=c(0,2),
node.by.map=TRUE)
### phylogenetic tree
mcc_phylo = read.tree("0_data/pruned_mcc_phylo.nwk")
### loading trait data
trait_mtx = read.table("0_data/trait_matrix.csv",
h=T, sep=",", na.strings = "na")
### importing habita range
habitat_range = readRDS("1_habitat_results/habitat_range.RDS")
### n tips and nodes
n_tips = Ntip(mcc_phylo)
n_inner_nodes = mcc_phylo$Nnode
### sampled species
sampled_sp = unique(trait_mtx$species)
### habitat states
spp_states = habitat_range$range
names(spp_states) =  habitat_range$species
## state colors
state_cols = c("forestgreen", "brown","darkorange")
names(state_cols) = levels(habitat_range$range)
### trait values per species
spp_traits = trait_mtx %>%
mutate(
seed_wei_mg = fruit_weight_mg/seed_number,
) %>%
group_by(species) %>%
reframe(
sla =  median(leaf_sla, na.rm=T),
seed_mass = median(seed_wei_mg),
n = n()
)
### setting regime df
species = spp_traits$species
regime = habitat_range$range
### vcv matrix
X = as.matrix( log(spp_traits[,c(t1,t2)]) )
rownames(X) = spp_traits$species
### model fit list
model_list = list()
model_list$er = matrix(c(0,1,1,
1,0,1,
1,1,0), 3, byrow = T)
model_list$or_sym =  matrix(c(0,1,0,
1,0,2,
0,2,0), 3, byrow = T)
model_list$or_asym  = matrix(c(0,1,0,
2,0,3,
0,4,0), 3, byrow = T)
model_list$un_sym = matrix(c(0,1,2,
1,0,3,
2,3,0), 3, byrow = T)
model_list$un_asym = matrix(c(0,1,2,
3,0,4,
5,6,0), 3, byrow = T)
### fit models
er_fit = fitDiscrete(phy = mcc_phylo ,
dat = spp_states,
model= model_list$er)
or_sym_fit = fitDiscrete(phy = mcc_phylo ,
dat = spp_states,
model= model_list$or_sym)
or_asym_fit = fitDiscrete(phy = mcc_phylo ,
dat = spp_states,
model= model_list$or_asym)
un_sym_fit = fitDiscrete(phy = mcc_phylo ,
dat = spp_states,
model= model_list$un_sym)
un_asym_fit = fitDiscrete(phy = mcc_phylo ,
dat = spp_states,
model= model_list$un_asym)
### picking AICc scores
aicc = c("er" = er_fit$opt$aicc,
"or_sym" = or_sym_fit$opt$aicc,
"or_asym" = or_asym_fit$opt$aicc,
"un_sym" = un_sym_fit$opt$aicc,
"un_asym" = un_asym_fit$opt$aicc
)
### number of parameters
k = c("er" = 1,
"or_sym" = 2,
"or_asym" = 4,
"un_sym" = 3,
"un_asym" = 6
)
### delta aicc
daicc = sort(aicc  - min(aicc))
### lowest daicc
fir_model = names(daicc[1])
sec_model = names(daicc[2])
### chossing best transition model
if (daicc[2] >= 2) {
best_model = fir_model
}
if (daicc[2] < 2) {
if(k[fir_model] < k[sec_model]){
best_model = fir_model
}
if(k[fir_model] > k[sec_model]){
best_model = sec_model
}
}
### infer simmaps
all_maps = phytools::make.simmap(tree = mcc_phylo,
x = spp_states,
model = model_list[[best_model]],
pi = c(0.25,0.5,0.25),
nsim = 100
)
### describe maps
des_map =  phytools::describe.simmap(all_maps)
### ancestral states probs
ace = des_map$ace
### setting states
# tip states probs
tip_states_probs = ace[(1+n_inner_nodes):(n_inner_nodes +n_tips), ]
tip_states_probs = tip_states_probs[,names(state_cols)]
# ancestral state probs
inner_node_probs = ace[1:n_inner_nodes,]
inner_node_probs = inner_node_probs[,names(state_cols)]
mcc_phylo$edge
ace
inner_node_probs
### all states
all_states = colnames(ace)[apply(ace,1,which.max)]
### ancestral node states
anc_states = all_states[1:n_node]
anc_states
### assign ancestral states
mcc_phylo$node.label = anc_states
phylomorphospace(tree = mcc_phylo,
X = X,
ftype="off",
bty="n",
xlab="ln seed mass",
ylab="ln SLA",
colors = state_cols,
node.size=c(0,2),
node.by.map=TRUE)
mcc_phylo
View(mcc_phylo)
phylomorphospace(tree = all_maps[[100]],
X = X,
ftype="off",
bty="n",
xlab="ln seed mass",
ylab="ln SLA",
colors = state_cols,
node.size=c(0,2),
node.by.map=TRUE)
phylomorphospace(tree = all_maps[[100]],
X = X,
ftype="off",
bty="n",
xlab="ln seed mass",
ylab="ln SLA",
colors = state_cols,
node.size=c(01,2),
node.by.map=TRUE)
phylomorphospace(tree = all_maps[[100]],
X = X,
ftype="off",
bty="n",
xlab="ln seed mass",
ylab="ln SLA",
colors = state_cols,
node.size=c(0,2),
node.by.map=TRUE)
legend("topleft",
labels =c("rainfores","generalist", "open-vegetation"),
pt.bg= state_cols,
pch=22,
pt.cex=1.5,
cex=0.8,
bty="n")
legend("topleft",
("rainfores","generalist", "open-vegetation"),
tiff("4_graphics/phylomorpho.tiff", units="cm", width=7, height=6.5, res=600)
phylomorphospace(tree = all_maps[[100]],
X = X,
ftype="off",
bty="n",
xlab="ln seed mass",
ylab="ln SLA",
colors = state_cols,
node.size=c(0,2),
node.by.map=TRUE)
legend("topleft",
c("rainforest","generalist", "open-vegetation"),
pt.bg= state_cols,
pch=22,
pt.cex=1.5,
cex=0.8,
bty="n")
dev.off()
tiff("4_graphics/phylomorpho.tiff", units="cm", width=14, height=13, res=600)
phylomorphospace(tree = all_maps[[100]],
X = X,
ftype="off",
bty="n",
xlab="ln seed mass",
ylab="ln SLA",
colors = state_cols,
node.size=c(0,2),
node.by.map=TRUE)
legend("topleft",
c("rainforest","generalist", "open-vegetation"),
pt.bg= state_cols,
pch=22,
pt.cex=1.5,
cex=0.8,
bty="n")
dev.off()
### vcv matrix
X = as.matrix( spp_traits[,c(t1,t2)]  )
rownames(X) = spp_traits$species
phylomorphospace(tree = all_maps[[100]],
X = X,
ftype="off",
bty="n",
xlab="ln seed mass",
ylab="ln SLA",
colors = state_cols,
node.size=c(0,2),
node.by.map=TRUE)
### comparing bm e vcv
bm_aic_list[[i]]
vcv_aic_list[[i]]
### loading phylogenetic tree
mcc_phylo = read.tree("0_data/pruned_mcc_phylo.nwk")
### loading trait data
trait_mtx = read.table("0_data/trait_matrix.csv",
h=T, sep=",", na.strings = "na")
### loading occurrence count per domain
habitat_range = readRDS("1_habitat_results/habitat_range.RDS")
### loading reconstructions fro ancestral range
simmap_list = readRDS("2_reconstruction_results/simmap/simmap_list.RDS")
### node and tip numbers
n_node = mcc_phylo$Nnode
n_tip = Ntip(mcc_phylo)
### sampled species
sampled_sp = unique(trait_mtx$species)
### defininf states
spp_states = habitat_range$range
names(spp_states) = habitat_range$species
### trait values per species
spp_traits = trait_mtx %>%
mutate(
seed_wei_mg = fruit_weight_mg/seed_number,
) %>%
group_by(species) %>%
reframe(
sla =  median(leaf_sla, na.rm=T),
seed_mass = median(seed_wei_mg),
n = n()
)
### choose traits
t1 = "seed_mass"
trait = log(spp_traits[[t1]])
names(trait) = spp_traits$species
### checking normality
shapiro.test( trait )
### fit WN model
wn_fit = fitContinuous(phy= mcc_phylo, dat= trait , model = "white")
wn_aic = wn_fit$opt$aic
wn_aic
### choose traits
t1 = "seed_mass"
t2 = "sla"
### checking normality
shapiro.test( log(spp_traits[[t1]]) )
shapiro.test( log(spp_traits[[t2]]) )
### vcv matrix
X = as.matrix( log(spp_traits[,c(t1,t2)]) )
rownames(X) = spp_traits$species
one_simmap$tree[[100]]
simmap_list
### pick one tree
one_simmap = simmap_list[[i]]
i = 1
### pick one tree
one_simmap = simmap_list[[i]]
m_fit = evol.vcv(
tree = one_simmap$tree[[100]],
X = X
)
m_fit
X
i = 50
### pick one tree
one_simmap = simmap_list[[i]]
m_fit = evol.vcv(
tree = one_simmap$tree[[100]],
X = X
)
m_fit
one_simmap$tree
### fit BM model
bm_fit = evol.vcv(phy= mcc_phylo,
dat= trait ,
model = "BM"
)
mcc_phylo
### fit BM model
bm_fit = evol.vcv(phy= mcc_phylo,
X = X
)
### fit BM model
bm_fit = evol.vcv(tree = mcc_phylo,
X = X
)
bm_fit
### fit BM model
bm_fit = evol.vcv(tree = one_simmap$tree[[100]], #mcc_phylo,
X = X
)
bm_fit
View(bm_fit)
one_simmap$ref.tree
one_simmap$tree
one_simmap$treeÂ´[[100]]
one_simmap$tree[[100]]
one_simmap$tree[[100]]$maps
### counting pruned phylognetic trees
n_phylo = length(list.files("0_data/pruned_phylos"))
n_phylo
### importing phylogenetic tree
phylo_path = paste0("0_data/pruned_phylos/pruned_phylo_", as.character(i))
phylo = read.tree(phylo_path)
### fit BM model
bm_fit = evolvcv.lite(tree = phylo,
X = X
)
bm_fit$opt$aic
bm_fit
### vcv models
dir_vcv= paste0("3_trait_results/EVOLVCV/",t1)
### trait name
t1 = "seed_mass"
### vcv models
dir_vcv= paste0("3_trait_results/EVOLVCV/",t1)
# aic scores
vcv_aic_list = readRDS(paste0(dir_vcv,"/vcv_aic_list.RDS") )
# best model list and parameters
vcv_best_list = readRDS(paste0(dir_vcv,"/vcv_best_list.RDS") )
vcv_rates_list = readRDS(paste0(dir_vcv,"/vcv_rates_list.RDS") )
### name of most frequent models
model_count = sort(table(unlist(vcv_best_list)), decreasing = T)
fir_model_name = names(model_count[1])
sec_model_name = names(model_count[2])
### indexes of most frequent models
best_model_names = unlist(vcv_best_list)
fir_model_index = which(best_model_names == fir_model_name)
sec_model_index = which(best_model_names == sec_model_name)
### picking correlation values
fir_cor_values = c()
for (i in fir_model_index){
rates = vcv_rates_list[[i]]
cor_value = cov2cor(rates)[1,2]
fir_cor_values = c(fir_cor_values, cor_value)
}
### describe
hist(fir_cor_values)
summary(fir_cor_values)
model_count
summary(fir_cor_values)
IQR(fir_cor_values)
### pick correlation values
sec_cor_values = list()
loop = 1
for (i in sec_model_index){
rates = vcv_rates_list[[i]]
cor_vec = c()
for (j in 1:length(rates)){
cor_value = cov2cor(rates[[j]])[1,2]
cor_vec = c(cor_vec, cor_value)
}
names(cor_vec) = names(vcv_rates_list[[i]])
sec_cor_values[[loop]] = cor_vec
loop = loop + 1
}
### transform to dataframe
sec_cor_df = data.frame(matrix(unlist(sec_cor_values),
nrow=length(sec_cor_values),
byrow=TRUE
)
)
## name columns
colnames(sec_cor_df) = names(vcv_rates_list[[i]])
sec_cor_df
### describe
summary(sec_cor_values)
sec_cor_values
sec_cor_df
### describe
apply(sec_cor_values,MARGIn = 2,  FUN = median)
### describe
apply(sec_cor_values,MARGIN = 2,  FUN = median)
sec_cor_values
### describe
apply(sec_cor_df, MARGIN = 2,  FUN = median)
apply(sec_cor_df, MARGIN = 2,  FUN = IQR)
### describe
apply(sec_cor_df, MARGIN = 2,  FUN = median)
apply(sec_cor_df, MARGIN = 2,  FUN = IQR)
