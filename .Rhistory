node.size=c(01,2),
node.by.map=TRUE)
phylomorphospace(tree = all_maps[[100]],
X = X,
ftype="off",
bty="n",
xlab="ln seed mass",
ylab="ln SLA",
colors = state_cols,
node.size=c(0,2),
node.by.map=TRUE)
legend("topleft",
labels =c("rainfores","generalist", "open-vegetation"),
pt.bg= state_cols,
pch=22,
pt.cex=1.5,
cex=0.8,
bty="n")
legend("topleft",
("rainfores","generalist", "open-vegetation"),
tiff("4_graphics/phylomorpho.tiff", units="cm", width=7, height=6.5, res=600)
phylomorphospace(tree = all_maps[[100]],
X = X,
ftype="off",
bty="n",
xlab="ln seed mass",
ylab="ln SLA",
colors = state_cols,
node.size=c(0,2),
node.by.map=TRUE)
legend("topleft",
c("rainforest","generalist", "open-vegetation"),
pt.bg= state_cols,
pch=22,
pt.cex=1.5,
cex=0.8,
bty="n")
dev.off()
tiff("4_graphics/phylomorpho.tiff", units="cm", width=14, height=13, res=600)
phylomorphospace(tree = all_maps[[100]],
X = X,
ftype="off",
bty="n",
xlab="ln seed mass",
ylab="ln SLA",
colors = state_cols,
node.size=c(0,2),
node.by.map=TRUE)
legend("topleft",
c("rainforest","generalist", "open-vegetation"),
pt.bg= state_cols,
pch=22,
pt.cex=1.5,
cex=0.8,
bty="n")
dev.off()
### vcv matrix
X = as.matrix( spp_traits[,c(t1,t2)]  )
rownames(X) = spp_traits$species
phylomorphospace(tree = all_maps[[100]],
X = X,
ftype="off",
bty="n",
xlab="ln seed mass",
ylab="ln SLA",
colors = state_cols,
node.size=c(0,2),
node.by.map=TRUE)
### comparing bm e vcv
bm_aic_list[[i]]
vcv_aic_list[[i]]
### loading phylogenetic tree
mcc_phylo = read.tree("0_data/pruned_mcc_phylo.nwk")
### loading trait data
trait_mtx = read.table("0_data/trait_matrix.csv",
h=T, sep=",", na.strings = "na")
### loading occurrence count per domain
habitat_range = readRDS("1_habitat_results/habitat_range.RDS")
### loading reconstructions fro ancestral range
simmap_list = readRDS("2_reconstruction_results/simmap/simmap_list.RDS")
### node and tip numbers
n_node = mcc_phylo$Nnode
n_tip = Ntip(mcc_phylo)
### sampled species
sampled_sp = unique(trait_mtx$species)
### defininf states
spp_states = habitat_range$range
names(spp_states) = habitat_range$species
### trait values per species
spp_traits = trait_mtx %>%
mutate(
seed_wei_mg = fruit_weight_mg/seed_number,
) %>%
group_by(species) %>%
reframe(
sla =  median(leaf_sla, na.rm=T),
seed_mass = median(seed_wei_mg),
n = n()
)
### choose traits
t1 = "seed_mass"
trait = log(spp_traits[[t1]])
names(trait) = spp_traits$species
### checking normality
shapiro.test( trait )
### fit WN model
wn_fit = fitContinuous(phy= mcc_phylo, dat= trait , model = "white")
wn_aic = wn_fit$opt$aic
wn_aic
### choose traits
t1 = "seed_mass"
t2 = "sla"
### checking normality
shapiro.test( log(spp_traits[[t1]]) )
shapiro.test( log(spp_traits[[t2]]) )
### vcv matrix
X = as.matrix( log(spp_traits[,c(t1,t2)]) )
rownames(X) = spp_traits$species
one_simmap$tree[[100]]
simmap_list
### pick one tree
one_simmap = simmap_list[[i]]
i = 1
### pick one tree
one_simmap = simmap_list[[i]]
m_fit = evol.vcv(
tree = one_simmap$tree[[100]],
X = X
)
m_fit
X
i = 50
### pick one tree
one_simmap = simmap_list[[i]]
m_fit = evol.vcv(
tree = one_simmap$tree[[100]],
X = X
)
m_fit
one_simmap$tree
### fit BM model
bm_fit = evol.vcv(phy= mcc_phylo,
dat= trait ,
model = "BM"
)
mcc_phylo
### fit BM model
bm_fit = evol.vcv(phy= mcc_phylo,
X = X
)
### fit BM model
bm_fit = evol.vcv(tree = mcc_phylo,
X = X
)
bm_fit
### fit BM model
bm_fit = evol.vcv(tree = one_simmap$tree[[100]], #mcc_phylo,
X = X
)
bm_fit
View(bm_fit)
one_simmap$ref.tree
one_simmap$tree
one_simmap$treeÂ´[[100]]
one_simmap$tree[[100]]
one_simmap$tree[[100]]$maps
### counting pruned phylognetic trees
n_phylo = length(list.files("0_data/pruned_phylos"))
n_phylo
### importing phylogenetic tree
phylo_path = paste0("0_data/pruned_phylos/pruned_phylo_", as.character(i))
phylo = read.tree(phylo_path)
### fit BM model
bm_fit = evolvcv.lite(tree = phylo,
X = X
)
bm_fit$opt$aic
bm_fit
### vcv models
dir_vcv= paste0("3_trait_results/EVOLVCV/",t1)
### trait name
t1 = "seed_mass"
### vcv models
dir_vcv= paste0("3_trait_results/EVOLVCV/",t1)
# aic scores
vcv_aic_list = readRDS(paste0(dir_vcv,"/vcv_aic_list.RDS") )
# best model list and parameters
vcv_best_list = readRDS(paste0(dir_vcv,"/vcv_best_list.RDS") )
vcv_rates_list = readRDS(paste0(dir_vcv,"/vcv_rates_list.RDS") )
### name of most frequent models
model_count = sort(table(unlist(vcv_best_list)), decreasing = T)
fir_model_name = names(model_count[1])
sec_model_name = names(model_count[2])
### indexes of most frequent models
best_model_names = unlist(vcv_best_list)
fir_model_index = which(best_model_names == fir_model_name)
sec_model_index = which(best_model_names == sec_model_name)
### picking correlation values
fir_cor_values = c()
for (i in fir_model_index){
rates = vcv_rates_list[[i]]
cor_value = cov2cor(rates)[1,2]
fir_cor_values = c(fir_cor_values, cor_value)
}
### describe
hist(fir_cor_values)
summary(fir_cor_values)
model_count
summary(fir_cor_values)
IQR(fir_cor_values)
### pick correlation values
sec_cor_values = list()
loop = 1
for (i in sec_model_index){
rates = vcv_rates_list[[i]]
cor_vec = c()
for (j in 1:length(rates)){
cor_value = cov2cor(rates[[j]])[1,2]
cor_vec = c(cor_vec, cor_value)
}
names(cor_vec) = names(vcv_rates_list[[i]])
sec_cor_values[[loop]] = cor_vec
loop = loop + 1
}
### transform to dataframe
sec_cor_df = data.frame(matrix(unlist(sec_cor_values),
nrow=length(sec_cor_values),
byrow=TRUE
)
)
## name columns
colnames(sec_cor_df) = names(vcv_rates_list[[i]])
sec_cor_df
### describe
summary(sec_cor_values)
sec_cor_values
sec_cor_df
### describe
apply(sec_cor_values,MARGIn = 2,  FUN = median)
### describe
apply(sec_cor_values,MARGIN = 2,  FUN = median)
sec_cor_values
### describe
apply(sec_cor_df, MARGIN = 2,  FUN = median)
apply(sec_cor_df, MARGIN = 2,  FUN = IQR)
### describe
apply(sec_cor_df, MARGIN = 2,  FUN = median)
apply(sec_cor_df, MARGIN = 2,  FUN = IQR)
### trait name
t1 = "seed_mass"
### bm models
dir_bm = paste0("3_trait_results/BM/",t1)
# aic scores
bm_aic_list = readRDS(paste0(dir_bm,"/bm_aic_list.RDS") )
# best model list and parameters
bm_rates_list = readRDS(paste0(dir_bm,"/bm_rates_list.RDS") )
### vcv models
dir_vcv= paste0("3_trait_results/EVOLVCV/",t1)
# aic scores
vcv_aic_list = readRDS(paste0(dir_vcv,"/vcv_aic_list.RDS") )
# best model list and parameters
vcv_best_list = readRDS(paste0(dir_vcv,"/vcv_best_list.RDS") )
vcv_rates_list = readRDS(paste0(dir_vcv,"/vcv_rates_list.RDS") )
### name of most frequent models
model_count = sort(table(unlist(vcv_best_list)), decreasing = T)
fir_model_name = names(model_count[1])
sec_model_name = names(model_count[2])
### indexes of most frequent models
best_model_names = unlist(vcv_best_list)
fir_model_index = which(best_model_names == fir_model_name)
sec_model_index = which(best_model_names == sec_model_name)
### picking correlation values
fir_cor_values = c()
for (i in fir_model_index){
rates = vcv_rates_list[[i]]
cor_value = cov2cor(rates)[1,2]
fir_cor_values = c(fir_cor_values, cor_value)
}
fir_cor_values
vcv_rates_list
vcv_rates_list
vcv_rates_list[[i]]
cov2cor(rates)
rates[1,1]
rates
### picking correlation values
fir_var_values = c()
for (i in fir_model_index){
rates = vcv_rates_list[[i]]
var_value = c(rates[1,1], rates[2,2])
fir_var_values = c(fir_var_values, var_value)
}
fir_var_values
### picking correlation values
fir_var_values = c()
for (i in fir_model_index){
rates = vcv_rates_list[[i]]
var_value = c(rates[1,1], rates[2,2])
fir_var_values = rbind(fir_var_values, var_value)
}
fir_var_values
### describe
hist(fir_var_values)
summary(fir_var_values)
IQR(fir_var_values)
colnames(fir_var_values)
colnames(fir_var_values) = c("seed_mass", "sla")
fir_var_values
IQR(fir_var_values$seed_mass)
fir_var_values
fir_var_values$seed_mass
fir_var_values[["seed_mass"]]
fir_var_values["seed_mass"]
fir_var_values
str(fir_cor_values)
as.data.frame(fir_var_values)
fir_var_values = as.data.frame(fir_var_values)
fir_var_values
### picking varaince values
fir_var_values = c()
for (i in fir_model_index){
rates = vcv_rates_list[[i]]
var_value = c(rates[1,1], rates[2,2])
fir_var_values = rbind(fir_var_values, var_value)
}
fir_var_values = as.data.frame(fir_var_values)
colnames(fir_var_values) = c("seed_mass", "sla")
fir_var_values["seed_mass"]
IQR(fir_var_values["seed_mass"])
IQR(fir_var_values[["seed_mass"]])
IQR(fir_var_values[["sla"]])
### describe
summary(fir_var_values)
IQR(fir_var_values[["seed_mass"]])
IQR(fir_var_values[["sla"]])
IQR(fir_var_values[["sla"]])
32/7
sec_model_index
### pick correlation values
sec_var_values = list()
loop = 1
rates = vcv_rates_list[[i]]
rates
vcv_rates_list
1:length(rates)
rates
i = 98
vcv_rates_list[[i]]
1:length(rates)
vcv_rates_list[[i]]
rates = vcv_rates_list[[i]]
length(rates)
1:length(rates)
c(rates[[j]][1,1] , rates[[j]][2,2] )
rates
names(rates)
names(rates)[j]
j = 1
names(rates)[j]
### pick correlation values
sec_var_values = c()
for (i in sec_model_index){
rates = vcv_rates_list[[i]]
var_vec = c()
for (j in 1:length(rates)){
mtx_name = names(rates)[j]
var_value = c(rates[[j]][1,1] , rates[[j]][2,2] )
var_vec = rbind(var_vec, var_value, mtx_name)
}
sec_var_values = rbind(sec_var_values, var_vec)
}
sec_var_values
### pick correlation values
sec_var_values = c()
for (i in sec_model_index){
rates = vcv_rates_list[[i]]
var_vec = c()
for (j in 1:length(rates)){
mtx_name = names(rates)[j]
var_value = c(rates[[j]][1,1] , rates[[j]][2,2] )
var_vec = rbind(var_vec, c(var_value, mtx_name) )
}
sec_var_values = rbind(sec_var_values, var_vec)
}
sec_var_values
names(rates)[j]
### pick correlation values
sec_cor_values = c()
for (i in sec_model_index){
rates = vcv_rates_list[[i]]
cor_vec = c()
for (j in 1:length(rates)){
mtx_name = names(rates)[j]
cor_value = cov2cor(rates[[j]])[1,2]
cor_vec = rbind(cor_vec, c(cor_value, mtx_name) )
}
sec_cor_values = rbind(sec_cor_values, cor_vec)
}
sec_cor_values
sec_cor_values
### transform to dataframe
sec_cor_df = as.data.frame(sec_cor_values )
## name columns
colnames(sec_cor_df) = c("corr", "habitat_type")
sec_cor_df
### describe
sec_cor_df %>%
group_by(habitat_type) %>%
reframe(median(corr), IQR(corr))
if (!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
### describe
sec_cor_df %>%
group_by(habitat_type) %>%
reframe(median(corr), IQR(corr))
### describe
sec_cor_df %>%
group_by(habitat_type) %>%
reframe(median(corr, na.rm=T), IQR(corr))
sec_cor_df
### describe
sec_cor_df %>%
group_by(habitat_type) %>%
mutate(median(corr, na.rm=T), IQR(corr))
### describe
sec_cor_df %>%
mutate(corr = as.numeric(corr)) %>%
group_by(habitat_type) %>%
reframe(median(corr, na.rm=T), IQR(corr))
sec_var_values
sec_var_df = as.data.frame(sec_var_values)
sec_var_df
## name columns
colnames(sec_var_df) = c("seed_mass", "sla", "habitat_type")
### describe
sec_var_df %>%
mutate(seed_mass = as.numeric(seed_mass),
sla = as.numeric(sla)
) %>%
group_by(habitat_type) %>%
reframe(median(seed_mass, na.rm=T),
IQR(seed_mass),
median(sla, na.rm=T),
IQR(sla)
)
### describe
sec_var_df %>%
mutate(seed_mass = as.numeric(seed_mass),
sla = as.numeric(sla)
) %>%
group_by(habitat_type) %>%
reframe(median(seed_mass, na.rm=T),
IQR(seed_mass),
median(sla, na.rm=T),
IQR(sla)
)
if (!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if (!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if (!require("ape")) install.packages("ape"); library("ape")
if (!require("geiger")) install.packages("geiger"); library("geiger")
if (!require("phytools")) install.packages("phytools"); library("phytools")
if (!require("nlme")) install.packages("nlme"); library("nlme")
### loading phylogenetic tree
mcc_phylo = read.tree("0_data/pruned_mcc_phylo.nwk")
### counting pruned phylognetic trees
n_phylo = length(list.files("0_data/pruned_phylos"))
### loading trait data
trait_mtx = read.table("0_data/trait_matrix.csv",
h=T, sep=",", na.strings = "na")
### loading occurrence count per domain
habitat_range = readRDS("1_habitat_results/habitat_range.RDS")
### sampled species
sampled_sp = unique(trait_mtx$species)
### defininf states
spp_states = habitat_range$range
names(spp_states) = habitat_range$species
### trait values per species
spp_traits = trait_mtx %>%
mutate(
seed_wei_mg = fruit_weight_mg/seed_number,
) %>%
group_by(species) %>%
reframe(
sla =  median(leaf_sla, na.rm=T),
seed_mass = median(seed_wei_mg),
n = n()
)
spp_traits
habitat_range
phylANOVA(tree = mcc_phylo,
x = habitat_range$range,
y = spp_traits$seed_mass)
### predictor
pred = habitat_range$range
names(pred) = habitat_range$species
### response
resp = spp_traits[["seed_mass"]]
names(resp) = spp_traits$species
phylANOVA(tree = mcc_phylo,
x = pred,
y = resp)
### response
resp = log(spp_traits[["seed_mass"]])
names(resp) = spp_traits$species
phylANOVA(tree = mcc_phylo,
x = pred,
y = resp)
### response
resp = spp_traits[["sla"]]
names(resp) = spp_traits$species
phylANOVA(tree = mcc_phylo,
x = pred,
y = resp)
